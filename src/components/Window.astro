---
export interface Props {
  title: string;
  iconSrc?: string;
  menuItems?: Array<{
    label: string;
    onClick?: string;
    dropdown?: Array<{
      label: string;
      href: string;
    }>;
  }>;
  windowId?: string;
}

const { 
  title, 
  iconSrc = '/imgs/earthanim1.gif', 
  menuItems = [
    { label: 'File', onClick: "alert('File menu - Under construction!')" },
    { label: 'Edit', onClick: "alert('Edit menu - Under construction!')" },
    { label: 'View', onClick: "alert('View menu - Under construction!')" },
    { 
      label: 'Go', 
      dropdown: [
        { label: 'üè† Homepage', href: '/' },
        { label: 'üìù Blog Archive', href: '/blog' },
        { label: 'üìß Guestbook (Soon)', href: '#' },
        { label: 'üîó Cool Links (Soon)', href: '#' }
      ]
    },
    { label: 'Bookmarks', onClick: "alert('Bookmarks menu - Under construction!')" },
    { label: 'Help', onClick: "alert('Help menu - Under construction!')" }
  ],
  windowId = 'mainWindow'
} = Astro.props;
---

<div class="container" id={windowId}>
  <div class="title-bar">
    <div class="title-text">
      <img src={iconSrc} alt="Icon" class="title-icon" />
      {title}
    </div>
    <div class="window-controls">
      <div class="window-btn minimize" onclick={`minimizeWindow('${windowId}')`} title="Minimize">_</div>
      <div class="window-btn maximize" onclick={`maximizeWindow('${windowId}')`} title="Maximize">‚ñ°</div>
      <div class="window-btn close" onclick={`closeWindow('${windowId}')`} title="Close">√ó</div>
    </div>
  </div>
  
  <div class="menu-bar">
    {menuItems.map((item, index) => (
      <div class="menu-item-container">
        {item.dropdown ? (
          <span 
            class="menu-item dropdown-trigger" 
            data-dropdown={`dropdown-${index}`}
            onclick={`toggleDropdown('dropdown-${index}')`}
          >
            {item.label} ‚ñº
          </span>
        ) : (
          <span class="menu-item" onclick={item.onClick}>{item.label}</span>
        )}
        
        {item.dropdown && (
          <div class="dropdown-menu" id={`dropdown-${index}`}>
            {item.dropdown.map(dropdownItem => (
              <a href={dropdownItem.href} class="dropdown-item">
                {dropdownItem.label}
              </a>
            ))}
          </div>
        )}
      </div>
    ))}
  </div>

  <div class="content-area">
    <slot />
  </div>
</div>

<style>
  .container {
    max-width: 800px;
    margin: 0 auto;
    background: #c0c0c0;
    border: 2px outset #c0c0c0;
    padding: 0;
    box-shadow: 2px 2px 5px #808080;
  }

  .container.expanded {
    max-width: 100%;
    margin: 0;
  }

  .title-bar {
    background: linear-gradient(90deg, #0080ff, #004080);
    color: white;
    padding: 2px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 11px;
    font-weight: bold;
  }

  .title-text {
    padding-left: 8px;
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .title-icon {
    height: 12px;
  }

  .window-controls {
    display: flex;
  }

  .window-btn {
    width: 16px;
    height: 14px;
    background: #c0c0c0;
    border: 1px outset #c0c0c0;
    margin-left: 2px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 8px;
    font-weight: bold;
    color: #000;
  }

  .window-btn:active {
    border: 1px inset #c0c0c0;
  }

  .window-btn.minimize {
    padding-bottom: 2px;
  }

  .window-btn.close:hover {
    background: #ff0000;
    color: white;
  }

  .content-area {
    padding: 20px;
  }

  .menu-bar {
    background: #c0c0c0;
    border-bottom: 1px solid #808080;
    padding: 2px;
    font-size: 11px;
    display: flex;
    position: relative;
  }

  .menu-item-container {
    position: relative;
    display: inline-block;
  }

  .menu-item {
    display: inline-block;
    padding: 4px 8px;
    cursor: pointer;
    border: 1px transparent;
  }

  .menu-item:hover {
    border: 1px outset #c0c0c0;
  }

  .menu-item:active {
    border: 1px inset #c0c0c0;
  }

  .dropdown-trigger {
    user-select: none;
  }

  .dropdown-menu {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background: #c0c0c0;
    border: 2px outset #c0c0c0;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
    min-width: 180px;
    z-index: 1000;
  }

  .dropdown-menu.show {
    display: block;
  }

  .dropdown-item {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
    color: #000000;
    font-size: 11px;
    border-bottom: 1px solid #a0a0a0;
    cursor: pointer;
  }

  .dropdown-item:last-child {
    border-bottom: none;
  }

  .dropdown-item:hover {
    background: #0080ff;
    color: #ffffff;
  }

  .dropdown-item:active {
    background: #004080;
  }

  .minimized {
    height: 30px;
    overflow: hidden;
  }

  .minimized .content-area {
    display: none;
  }
</style>

<script>
  // Window control functions
  function minimizeWindow(windowId: string) {
    const mainWindow = document.getElementById(windowId);
    if (mainWindow) {
      mainWindow.classList.toggle('minimized');
    }
  }

  function maximizeWindow(windowId: string) {
    const mainWindow = document.getElementById(windowId);
    if (mainWindow) {
      mainWindow.classList.toggle('expanded');
      
      // Update the maximize button appearance
      const maxBtn = mainWindow.querySelector('.maximize');
      if (maxBtn) {
        if (mainWindow.classList.contains('expanded')) {
          maxBtn.innerHTML = '‚ùê'; // Restore icon
          maxBtn.setAttribute('title', 'Restore');
        } else {
          maxBtn.innerHTML = '‚ñ°'; // Maximize icon
          maxBtn.setAttribute('title', 'Maximize');
        }
      }
    }
  }

  function closeWindow(windowId: string) {
    if (confirm('Are you sure you want to close this rad website?')) {
      document.body.innerHTML = '<div style="background: #008080; color: white; text-align: center; padding: 50px; font-family: MS Sans Serif;"><h1>Thanks for visiting!</h1><p>Window closed - Click refresh to reopen</p></div>';
    }
  }

  function toggleDropdown(dropdownId: string) {
    // Close all other dropdowns first
    const allDropdowns = document.querySelectorAll('.dropdown-menu');
    allDropdowns.forEach(dropdown => {
      if (dropdown.id !== dropdownId) {
        dropdown.classList.remove('show');
      }
    });

    // Toggle the clicked dropdown
    const dropdown = document.getElementById(dropdownId);
    if (dropdown) {
      dropdown.classList.toggle('show');
    }
  }

  // Close dropdowns when clicking outside
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    if (!target.closest('.menu-item-container')) {
      const allDropdowns = document.querySelectorAll('.dropdown-menu');
      allDropdowns.forEach(dropdown => {
        dropdown.classList.remove('show');
      });
    }
  });

  // Make functions global so they can be called from onclick attributes
  (window as any).minimizeWindow = minimizeWindow;
  (window as any).maximizeWindow = maximizeWindow;
  (window as any).closeWindow = closeWindow;
  (window as any).toggleDropdown = toggleDropdown;
</script>
